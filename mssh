#!/usr/bin/env python
#encoding: utf-8

import sys
import argparse
import logging
import stomp
import time
from mssh import (
    ClientListener,
    show_summary,
    show_results,
)


def main(hosts, server='localhost', port=61613, command='echo pong',
         timeout=60, res_format='summary', user=None, passcode=None):
    logging.info("Sending commands to %s, connected to STOMP server %s:%d"
                 % (hosts, server, port))
    if user:
        client = stomp.Connection([(server, port)])
    else:
        client = stomp.Connection([(server, port)],
                                  user=user, passcode=passcode)
    listener = ClientListener(server, port, command, client, hosts)
    while not listener.finished and timeout:
        time.sleep(1)
        timeout -= 1
    if res_format == 'summary':
        rc = show_summary(listener.results, hosts)
    elif res_format == 'all':
        rc = show_results(listener.results, hosts)
    elif res_format == 'only_error':
        rc = show_results(listener.results, hosts, error_only=True)
    sys.exit(rc)


def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--log-level',
                        choices=['error', 'info', 'debug'],
                        default='quiet', help='Level of messages to show.')
    parser.add_argument('-f', '--result-format',
                        choices=['all', 'summary', 'only_error'],
                        default='summary', help='What to show as result.')
    parser.add_argument('-s', '--stomp-server',
                        default='localhost',
                        help='STOMP server to connect to.')
    parser.add_argument('-p', '--stomp-port',
                        default=61613, type=int,
                        help='STOMP port to connect to.')
    parser.add_argument('-t', '--timeout',
                        default=60, type=int,
                        help='Time to wait for responses.')
    parser.add_argument('-H', '--hosts', action='store', required=True,
                        help='Comma separated hosts to connect to')
    parser.add_argument('command', action='store',
                        default=[], nargs='*',
                        help="Command to execute, can be read from stdin if "
                             "none specified")
    return parser

if __name__ == '__main__':
    parser = create_parser()
    args = parser.parse_args()
    if args.log_level == 'debug':
        logging.basicConfig(level=logging.DEBUG)
    if args.log_level == 'info':
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.ERROR)
    if not args.command:
        command = sys.stdin.read()
    else:
        command = ' '.join(args.command)
    main(
        hosts=args.hosts.split(','),
        server=args.stomp_server,
        port=args.stomp_port,
        command=command,
        timeout=args.timeout,
        res_format=args.result_format)
